//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/ScreenControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ScreenControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ScreenControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ScreenControls"",
    ""maps"": [
        {
            ""name"": ""Spawn"",
            ""id"": ""71f7f7a5-ded3-4566-ab0b-e581411d0f19"",
            ""actions"": [
                {
                    ""name"": ""Mouse Position"",
                    ""type"": ""Value"",
                    ""id"": ""9a0d6825-7a2f-44fb-96e9-c7c5f3c349e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spawn"",
                    ""type"": ""Button"",
                    ""id"": ""d437a681-e1bb-4eb3-8f95-8563cee2fa07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a70962a-0396-4577-ba4f-9b1d2e82bd9e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2928016f-d4aa-4bf3-8ab2-ca14272ea454"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spawn
        m_Spawn = asset.FindActionMap("Spawn", throwIfNotFound: true);
        m_Spawn_MousePosition = m_Spawn.FindAction("Mouse Position", throwIfNotFound: true);
        m_Spawn_Spawn = m_Spawn.FindAction("Spawn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spawn
    private readonly InputActionMap m_Spawn;
    private List<ISpawnActions> m_SpawnActionsCallbackInterfaces = new List<ISpawnActions>();
    private readonly InputAction m_Spawn_MousePosition;
    private readonly InputAction m_Spawn_Spawn;
    public struct SpawnActions
    {
        private @ScreenControls m_Wrapper;
        public SpawnActions(@ScreenControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Spawn_MousePosition;
        public InputAction @Spawn => m_Wrapper.m_Spawn_Spawn;
        public InputActionMap Get() { return m_Wrapper.m_Spawn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpawnActions set) { return set.Get(); }
        public void AddCallbacks(ISpawnActions instance)
        {
            if (instance == null || m_Wrapper.m_SpawnActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpawnActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Spawn.started += instance.OnSpawn;
            @Spawn.performed += instance.OnSpawn;
            @Spawn.canceled += instance.OnSpawn;
        }

        private void UnregisterCallbacks(ISpawnActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Spawn.started -= instance.OnSpawn;
            @Spawn.performed -= instance.OnSpawn;
            @Spawn.canceled -= instance.OnSpawn;
        }

        public void RemoveCallbacks(ISpawnActions instance)
        {
            if (m_Wrapper.m_SpawnActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpawnActions instance)
        {
            foreach (var item in m_Wrapper.m_SpawnActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpawnActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpawnActions @Spawn => new SpawnActions(this);
    public interface ISpawnActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnSpawn(InputAction.CallbackContext context);
    }
}
